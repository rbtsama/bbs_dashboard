---
description: global rules
globs: 
alwaysApply: false
---
### 1. PowerShell Compatibility
- All commands must be compatible with Windows PowerShell syntax
- Use PowerShell-specific cmdlets (e.g., `Get-ChildItem` instead of `ls` when appropriate)
- Ensure proper escaping of special characters in PowerShell (e.g., using backticks `` ` `` for escaping)
- Use correct path separators for Windows (`\` instead of `/` when specifying file paths)

### 2. Permission and Environment Limitations

**Administrative Tasks:**
- For commands requiring administrator privileges, provide clear instructions like:
  ```
  # This command requires administrator privileges
  # Please run PowerShell as administrator and execute:
  New-Item -Path 'C:\Program Files\MyApp' -ItemType Directory
  ```

**External Requirements:**
- Do not attempt to execute commands that require:
  - Software installation (Python, Node.js, etc.)
  - Environment variable configuration
  - System reboots
  - External website downloads

**Alternative Approach:**
- Instead of attempting impossible tasks, provide clear manual instructions:
  ```
  # Please install Python from https://www.python.org/downloads/
  # After installation, return here to continue with the next steps
  ```

### 3. Directory and Environment Awareness

**Directory Context:**
- Always verify the current directory before executing commands:
  ```powershell
  Get-Location  # Check current directory
  ```
- Use explicit paths when necessary:
  ```powershell
  Set-Location -Path "C:\Projects\MyProject"
  ```

**Virtual Environment Awareness:**
- Check if commands need to be run in a virtual environment:
  ```powershell
  # Check if we're in a virtual environment
  $env:VIRTUAL_ENV
  
  # If not in a virtual environment and one is needed:
  # Please activate your virtual environment with:
  # .\venv\Scripts\Activate.ps1
  ```

### 4. Task Management

**Task Segmentation:**
- Break down complex tasks into smaller, manageable steps
- Provide clear headers for each task section
- Confirm completion of each step before proceeding to the next

**Progress Tracking:**
- Include verification commands after critical steps:
  ```powershell
  # Verify the file was created
  Test-Path -Path ".\config.json"
  ```

**Error Handling:**
- Include basic error handling in critical commands:
  ```powershell
  try {
      # Command that might fail
      Invoke-RestMethod -Uri "http://localhost:8000/api"
  } catch {
      Write-Host "Error connecting to API: $_"
  }
  ```

## Implementation Example

```powershell
# TASK: Set up a Python project with dependencies

# Step 1: Verify Python installation
python --version
# If Python is not installed, please install it from https://www.python.org/downloads/

# Step 2: Create project directory
$projectDir = "C:\Projects\DataAnalysis"
if (-not (Test-Path -Path $projectDir)) {
    New-Item -Path $projectDir -ItemType Directory
    Write-Host "Created project directory at $projectDir"
}
Set-Location -Path $projectDir

# Step 3: Create virtual environment
python -m venv venv
# Activate the virtual environment
.\venv\Scripts\Activate.ps1

# Step 4: Install required packages
pip install pandas numpy scikit-learn

# Step 5: Verify installation
pip list | Select-String -Pattern "pandas|numpy|scikit-learn"
```