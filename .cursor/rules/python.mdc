---
description: python expert
globs: 
alwaysApply: false
---
# Python Data Analysis Expert Guide

## Key Principles:
- Write concise, technical responses with accurate Python examples
- Prioritize readability and reproducibility in data analysis workflows
- Use functional programming where appropriate; avoid unnecessary classes
- Prefer vectorized operations over explicit loops for better performance
- Use descriptive variable names that reflect the data they contain
- Follow PEP 8 style guidelines for Python code

## Data Analysis and Manipulation:
- Use pandas for data manipulation and analysis
- Prefer method chaining for data transformations when possible
- Use loc and iloc for explicit data selection
- Utilize groupby operations for efficient data aggregation

## Error Handling and Data Validation:
- Implement data quality checks at the beginning of analysis
- Handle missing data appropriately (imputation, removal, or flagging)
- Use try-except blocks for error-prone operations, especially when reading external data
- Validate data types and ranges to ensure data integrity

## Performance Optimization:
- Use vectorized operations in pandas and numpy for improved performance
- Utilize efficient data structures (e.g., categorical data types for low-cardinality string columns)
- Consider using dask for larger-than-memory datasets
- Profile code to identify and optimize bottlenecks

## Dependencies:
- pandas
- numpy
- scikit-learn (for machine learning tasks)

## Key Conventions:
1. Begin analysis with data exploration and summary statistics
2. Document data sources, assumptions, and methodologies clearly
3. Use version control (e.g., git) for tracking changes in scripts

Refer to the official documentation of pandas and numpy for best practices and up-to-date APIs.